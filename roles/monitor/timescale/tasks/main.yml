# monitoring datastore
- name: timescale data volume
  environment:
    KUBECONFIG: "{{ cluster_context }}"
  kubectl:
    namespace: monitor
    content: "{{ lookup('template', 'volume-data.yml') | from_yaml }}"
  vars:
    item: "{{ secrets.timescale }}"

- name: timescale server deploy
  environment:
    KUBECONFIG: "{{ cluster_context }}"
  kubectl:
    namespace: monitor
    content: "{{ lookup('template', 'deploy-server.yml') | from_yaml }}"
  vars:
    item: "{{ secrets.timescale }}"

- name: timescale service
  environment:
    KUBECONFIG: "{{ cluster_context }}"
  kubectl:
    namespace: monitor
    content: "{{ lookup('template', 'service.yml') | from_yaml }}"
  vars:
    item: "{{ secrets.timescale }}"

- name: wait for timescale to be available
  environment:
    KUBECONFIG: "{{ cluster_context }}"
  kubectl:
    namespace: monitor
    command: get pods -l=k8s-app=timescale --field-selector=status.phase=Running
  register: result
  until: result.stdout.find("Running") != -1
  retries: 6
  delay: 10

- name: timescale adapter deploy
  environment:
    KUBECONFIG: "{{ cluster_context }}"
  kubectl:
    namespace: monitor
    content: "{{ lookup('template', 'deploy-adapter.yml') | from_yaml }}"
  vars:
    item: "{{ secrets.timescale }}"

- name: timescale prune account
  environment:
    KUBECONFIG: "{{ cluster_context }}"
  kubectl:
    namespace: monitor
    content: "{{ lookup('template', 'account-prune.yml') | from_yaml }}"
  vars:
    item: "{{ secrets.timescale }}"

- name: timescale prune role
  environment:
    KUBECONFIG: "{{ cluster_context }}"
  kubectl:
    namespace: monitor
    content: "{{ lookup('template', 'role-prune.yml') | from_yaml }}"
  vars:
    item: "{{ secrets.timescale }}"

- name: timescale prune bind
  environment:
    KUBECONFIG: "{{ cluster_context }}"
  kubectl:
    namespace: monitor
    content: "{{ lookup('template', 'bind-prune.yml') | from_yaml }}"
  vars:
    item: "{{ secrets.timescale }}"

- name: timescale prune job
  environment:
    KUBECONFIG: "{{ cluster_context }}"
  kubectl:
    namespace: monitor
    content: "{{ lookup('template', 'job-prune.yml') | from_yaml }}"
  vars:
    item: "{{ secrets.timescale }}"

- name: prometheus role
  postgresql_user:
    <<: &k8s-timescale
      login_host: "timescale.monitor.svc.cluster.{{ secrets.dns.base }}"
      login_password: "{{ secrets.timescale.root.pass }}"
      login_user: postgres

    name: "{{ secrets.timescale.prometheus.user }}"
    password: "{{ secrets.timescale.prometheus.pass }}"

- name: prometheus database
  postgresql_db:
    <<: *k8s-timescale
    name: prometheus
    owner: "{{ secrets.timescale.prometheus.user }}"
